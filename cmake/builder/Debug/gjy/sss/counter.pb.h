// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sss/counter.proto

#ifndef PROTOBUF_sss_2fcounter_2eproto__INCLUDED
#define PROTOBUF_sss_2fcounter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dsn {
namespace example {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sss_2fcounter_2eproto();
void protobuf_AssignDesc_sss_2fcounter_2eproto();
void protobuf_ShutdownFile_sss_2fcounter_2eproto();

class count_name;
class count_op;
class count_result;

// ===================================================================

class count_op : public ::google::protobuf::Message {
 public:
  count_op();
  virtual ~count_op();

  count_op(const count_op& from);

  inline count_op& operator=(const count_op& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const count_op& default_instance();

  void Swap(count_op* other);

  // implements Message ----------------------------------------------

  inline count_op* New() const { return New(NULL); }

  count_op* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const count_op& from);
  void MergeFrom(const count_op& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(count_op* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 operand = 2;
  void clear_operand();
  static const int kOperandFieldNumber = 2;
  ::google::protobuf::int32 operand() const;
  void set_operand(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dsn.example.count_op)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 operand_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sss_2fcounter_2eproto();
  friend void protobuf_AssignDesc_sss_2fcounter_2eproto();
  friend void protobuf_ShutdownFile_sss_2fcounter_2eproto();

  void InitAsDefaultInstance();
  static count_op* default_instance_;
};
// -------------------------------------------------------------------

class count_name : public ::google::protobuf::Message {
 public:
  count_name();
  virtual ~count_name();

  count_name(const count_name& from);

  inline count_name& operator=(const count_name& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const count_name& default_instance();

  void Swap(count_name* other);

  // implements Message ----------------------------------------------

  inline count_name* New() const { return New(NULL); }

  count_name* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const count_name& from);
  void MergeFrom(const count_name& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(count_name* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dsn.example.count_name)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sss_2fcounter_2eproto();
  friend void protobuf_AssignDesc_sss_2fcounter_2eproto();
  friend void protobuf_ShutdownFile_sss_2fcounter_2eproto();

  void InitAsDefaultInstance();
  static count_name* default_instance_;
};
// -------------------------------------------------------------------

class count_result : public ::google::protobuf::Message {
 public:
  count_result();
  virtual ~count_result();

  count_result(const count_result& from);

  inline count_result& operator=(const count_result& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const count_result& default_instance();

  void Swap(count_result* other);

  // implements Message ----------------------------------------------

  inline count_result* New() const { return New(NULL); }

  count_result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const count_result& from);
  void MergeFrom(const count_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(count_result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dsn.example.count_result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sss_2fcounter_2eproto();
  friend void protobuf_AssignDesc_sss_2fcounter_2eproto();
  friend void protobuf_ShutdownFile_sss_2fcounter_2eproto();

  void InitAsDefaultInstance();
  static count_result* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// count_op

// optional string name = 1;
inline void count_op::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& count_op::name() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_op.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void count_op::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsn.example.count_op.name)
}
inline void count_op::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsn.example.count_op.name)
}
inline void count_op::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsn.example.count_op.name)
}
inline ::std::string* count_op::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dsn.example.count_op.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* count_op::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void count_op::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dsn.example.count_op.name)
}

// optional int32 operand = 2;
inline void count_op::clear_operand() {
  operand_ = 0;
}
inline ::google::protobuf::int32 count_op::operand() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_op.operand)
  return operand_;
}
inline void count_op::set_operand(::google::protobuf::int32 value) {
  
  operand_ = value;
  // @@protoc_insertion_point(field_set:dsn.example.count_op.operand)
}

// -------------------------------------------------------------------

// count_name

// optional string name = 1;
inline void count_name::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& count_name::name() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_name.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void count_name::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsn.example.count_name.name)
}
inline void count_name::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsn.example.count_name.name)
}
inline void count_name::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsn.example.count_name.name)
}
inline ::std::string* count_name::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dsn.example.count_name.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* count_name::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void count_name::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dsn.example.count_name.name)
}

// -------------------------------------------------------------------

// count_result

// optional int32 value = 1;
inline void count_result::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 count_result::value() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_result.value)
  return value_;
}
inline void count_result::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:dsn.example.count_result.value)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example
}  // namespace dsn

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sss_2fcounter_2eproto__INCLUDED
