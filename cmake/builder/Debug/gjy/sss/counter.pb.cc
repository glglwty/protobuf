// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sss/counter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sss/counter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dsn {
namespace example {

namespace {

const ::google::protobuf::Descriptor* count_op_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  count_op_reflection_ = NULL;
const ::google::protobuf::Descriptor* count_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  count_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* count_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  count_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sss_2fcounter_2eproto() {
  protobuf_AddDesc_sss_2fcounter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sss/counter.proto");
  GOOGLE_CHECK(file != NULL);
  count_op_descriptor_ = file->message_type(0);
  static const int count_op_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_op, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_op, operand_),
  };
  count_op_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      count_op_descriptor_,
      count_op::default_instance_,
      count_op_offsets_,
      -1,
      -1,
      -1,
      sizeof(count_op),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_op, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_op, _is_default_instance_));
  count_name_descriptor_ = file->message_type(1);
  static const int count_name_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_name, name_),
  };
  count_name_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      count_name_descriptor_,
      count_name::default_instance_,
      count_name_offsets_,
      -1,
      -1,
      -1,
      sizeof(count_name),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_name, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_name, _is_default_instance_));
  count_result_descriptor_ = file->message_type(2);
  static const int count_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_result, value_),
  };
  count_result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      count_result_descriptor_,
      count_result::default_instance_,
      count_result_offsets_,
      -1,
      -1,
      -1,
      sizeof(count_result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_result, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(count_result, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sss_2fcounter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      count_op_descriptor_, &count_op::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      count_name_descriptor_, &count_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      count_result_descriptor_, &count_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sss_2fcounter_2eproto() {
  delete count_op::default_instance_;
  delete count_op_reflection_;
  delete count_name::default_instance_;
  delete count_name_reflection_;
  delete count_result::default_instance_;
  delete count_result_reflection_;
}

void protobuf_AddDesc_sss_2fcounter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021sss/counter.proto\022\013dsn.example\")\n\010coun"
    "t_op\022\014\n\004name\030\001 \001(\t\022\017\n\007operand\030\002 \001(\005\"\032\n\nc"
    "ount_name\022\014\n\004name\030\001 \001(\t\"\035\n\014count_result\022"
    "\r\n\005value\030\001 \001(\0052~\n\007counter\0227\n\003add\022\025.dsn.e"
    "xample.count_op\032\031.dsn.example.count_resu"
    "lt\022:\n\004read\022\027.dsn.example.count_name\032\031.ds"
    "n.example.count_resultb\006proto3", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sss/counter.proto", &protobuf_RegisterTypes);
  count_op::default_instance_ = new count_op();
  count_name::default_instance_ = new count_name();
  count_result::default_instance_ = new count_result();
  count_op::default_instance_->InitAsDefaultInstance();
  count_name::default_instance_->InitAsDefaultInstance();
  count_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sss_2fcounter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sss_2fcounter_2eproto {
  StaticDescriptorInitializer_sss_2fcounter_2eproto() {
    protobuf_AddDesc_sss_2fcounter_2eproto();
  }
} static_descriptor_initializer_sss_2fcounter_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int count_op::kNameFieldNumber;
const int count_op::kOperandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

count_op::count_op()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsn.example.count_op)
}

void count_op::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

count_op::count_op(const count_op& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsn.example.count_op)
}

void count_op::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operand_ = 0;
}

count_op::~count_op() {
  // @@protoc_insertion_point(destructor:dsn.example.count_op)
  SharedDtor();
}

void count_op::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void count_op::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* count_op::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return count_op_descriptor_;
}

const count_op& count_op::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sss_2fcounter_2eproto();
  return *default_instance_;
}

count_op* count_op::default_instance_ = NULL;

count_op* count_op::New(::google::protobuf::Arena* arena) const {
  count_op* n = new count_op;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void count_op::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operand_ = 0;
}

bool count_op::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsn.example.count_op)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dsn.example.count_op.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operand;
        break;
      }

      // optional int32 operand = 2;
      case 2: {
        if (tag == 16) {
         parse_operand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsn.example.count_op)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsn.example.count_op)
  return false;
#undef DO_
}

void count_op::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsn.example.count_op)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dsn.example.count_op.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 operand = 2;
  if (this->operand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operand(), output);
  }

  // @@protoc_insertion_point(serialize_end:dsn.example.count_op)
}

::google::protobuf::uint8* count_op::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsn.example.count_op)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dsn.example.count_op.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 operand = 2;
  if (this->operand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operand(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dsn.example.count_op)
  return target;
}

int count_op::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 operand = 2;
  if (this->operand() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operand());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void count_op::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const count_op* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const count_op>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void count_op::MergeFrom(const count_op& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.operand() != 0) {
    set_operand(from.operand());
  }
}

void count_op::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void count_op::CopyFrom(const count_op& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool count_op::IsInitialized() const {

  return true;
}

void count_op::Swap(count_op* other) {
  if (other == this) return;
  InternalSwap(other);
}
void count_op::InternalSwap(count_op* other) {
  name_.Swap(&other->name_);
  std::swap(operand_, other->operand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata count_op::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = count_op_descriptor_;
  metadata.reflection = count_op_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// count_op

// optional string name = 1;
void count_op::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& count_op::name() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_op.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void count_op::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsn.example.count_op.name)
}
 void count_op::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsn.example.count_op.name)
}
 void count_op::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsn.example.count_op.name)
}
 ::std::string* count_op::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dsn.example.count_op.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* count_op::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void count_op::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dsn.example.count_op.name)
}

// optional int32 operand = 2;
void count_op::clear_operand() {
  operand_ = 0;
}
 ::google::protobuf::int32 count_op::operand() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_op.operand)
  return operand_;
}
 void count_op::set_operand(::google::protobuf::int32 value) {
  
  operand_ = value;
  // @@protoc_insertion_point(field_set:dsn.example.count_op.operand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int count_name::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

count_name::count_name()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsn.example.count_name)
}

void count_name::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

count_name::count_name(const count_name& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsn.example.count_name)
}

void count_name::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

count_name::~count_name() {
  // @@protoc_insertion_point(destructor:dsn.example.count_name)
  SharedDtor();
}

void count_name::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void count_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* count_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return count_name_descriptor_;
}

const count_name& count_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sss_2fcounter_2eproto();
  return *default_instance_;
}

count_name* count_name::default_instance_ = NULL;

count_name* count_name::New(::google::protobuf::Arena* arena) const {
  count_name* n = new count_name;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void count_name::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool count_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsn.example.count_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dsn.example.count_name.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsn.example.count_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsn.example.count_name)
  return false;
#undef DO_
}

void count_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsn.example.count_name)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dsn.example.count_name.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dsn.example.count_name)
}

::google::protobuf::uint8* count_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsn.example.count_name)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dsn.example.count_name.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dsn.example.count_name)
  return target;
}

int count_name::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void count_name::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const count_name* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const count_name>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void count_name::MergeFrom(const count_name& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void count_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void count_name::CopyFrom(const count_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool count_name::IsInitialized() const {

  return true;
}

void count_name::Swap(count_name* other) {
  if (other == this) return;
  InternalSwap(other);
}
void count_name::InternalSwap(count_name* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata count_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = count_name_descriptor_;
  metadata.reflection = count_name_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// count_name

// optional string name = 1;
void count_name::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& count_name::name() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_name.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void count_name::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsn.example.count_name.name)
}
 void count_name::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsn.example.count_name.name)
}
 void count_name::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsn.example.count_name.name)
}
 ::std::string* count_name::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dsn.example.count_name.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* count_name::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void count_name::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dsn.example.count_name.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int count_result::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

count_result::count_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsn.example.count_result)
}

void count_result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

count_result::count_result(const count_result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsn.example.count_result)
}

void count_result::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
}

count_result::~count_result() {
  // @@protoc_insertion_point(destructor:dsn.example.count_result)
  SharedDtor();
}

void count_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void count_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* count_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return count_result_descriptor_;
}

const count_result& count_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sss_2fcounter_2eproto();
  return *default_instance_;
}

count_result* count_result::default_instance_ = NULL;

count_result* count_result::New(::google::protobuf::Arena* arena) const {
  count_result* n = new count_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void count_result::Clear() {
  value_ = 0;
}

bool count_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsn.example.count_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsn.example.count_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsn.example.count_result)
  return false;
#undef DO_
}

void count_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsn.example.count_result)
  // optional int32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:dsn.example.count_result)
}

::google::protobuf::uint8* count_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsn.example.count_result)
  // optional int32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dsn.example.count_result)
  return target;
}

int count_result::ByteSize() const {
  int total_size = 0;

  // optional int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void count_result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const count_result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const count_result>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void count_result::MergeFrom(const count_result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void count_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void count_result::CopyFrom(const count_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool count_result::IsInitialized() const {

  return true;
}

void count_result::Swap(count_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void count_result::InternalSwap(count_result* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata count_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = count_result_descriptor_;
  metadata.reflection = count_result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// count_result

// optional int32 value = 1;
void count_result::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 count_result::value() const {
  // @@protoc_insertion_point(field_get:dsn.example.count_result.value)
  return value_;
}
 void count_result::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:dsn.example.count_result.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace example
}  // namespace dsn

// @@protoc_insertion_point(global_scope)
